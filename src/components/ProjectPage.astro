---
// Definiamo le "props"
export interface Props {
  title: string;
  description: string;
  imagesUrls?: string[]; 
  repoUrl?: string;
  tags?: string[];
}

const { 
  title, 
  description, 
  imagesUrls = [], 
  repoUrl, 
  tags = [] 
} = Astro.props;

const finalImageUrls = imagesUrls.map(
  (relativeUrl) => import.meta.env.BASE_URL + relativeUrl
);

// Mappa per associare i nomi dei tag (in minuscolo) ai loro loghi.
// In questo modo il sistema Ã¨ flessibile.
const iconMap: { [key: string]: string } = {
  flutter: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/flutter.svg",
  dart: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/dart.svg",
  ios: "https://cdn.jsdelivr.net/npm/simple-icons@13.21.0/icons/apple.svg",
  android: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/android.svg",
  unrealengine: "https://cdn.jsdelivr.net/npm/simple-icons@13.21.0/icons/unrealengine.svg",
  java: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/java.svg",
  cplusplus: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/cplusplus.svg",
  c: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/c.svg",
  astro: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/astro.svg",
  css: "https://cdn.jsdelivr.net/npm/simple-icons@v13/icons/css3.svg",
};

// Funzione per trovare l'URL del logo corrispondente a un tag
const getIconUrl = (tag: string) => {
  const normalizedTag = tag.toLowerCase().replace(/\s+/g, ''); // Converte in minuscolo e rimuove spazi
  return iconMap[normalizedTag];
};
---

<!-- Titolo e Tags -->
<div class="text-center mb-6 mt-6 animate-fadeIn">
  <h1 class="text-4xl md:text-5xl font-bold text-primary mb-4">
    {title}
  </h1>
  {tags.length > 0 && (
    <div class="flex flex-wrap gap-2 justify-center">
      {tags.map(tag => {
        const iconUrl = getIconUrl(tag);
        return (
          <span class="bg-primary/20 text-primary text-xs font-semibold px-3 py-1 rounded-full flex items-center gap-1.5">
            {/* Mostra l'icona solo se la troviamo nella nostra mappa */}
            {iconUrl && <img src={iconUrl} alt={`${tag} logo`} class="h-3 w-3 invert" />}
            {tag}
          </span>
        )
      })}
    </div>
  )}
</div>

<!-- Descrizione -->
<p class="text-lg text-gray-300 leading-relaxed mb-8 text-center animate-fadeIn">
  {description}
</p>

<!-- Galleria di Immagini: in riga, centrata e con poco spazio -->
{finalImageUrls.length > 0 && (
  <div class="my-12 flex justify-center items-start gap-4 flex-wrap animate-fadeIn">
    {finalImageUrls.map((url, index) => (
      <img 
        src={url}
        alt={`Screenshot del progetto ${title} #${index + 1}`} 
        class="max-w-[250px] h-auto rounded-lg shadow-xl" 
      />
    ))}
  </div>
)}

<!-- Pulsanti Call to Action -->
<div class="flex flex-col sm:flex-row gap-4 justify-center">
  {repoUrl && (
    <a href={repoUrl} target="_blank" rel="noopener noreferrer" class="btn-secondary text-center">
      Vedi il Codice
    </a>
  )}
</div>

<style>
  /* Stili esistenti... */
  .btn-secondary {
    display: inline-block;
    padding: var(--btn-padding);
    background-color: transparent;
    color: var(--color-primary);
    font-weight: 600;
    border-radius: 0.5rem;
    border: 2px solid var(--color-primary);
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  .btn-secondary:hover {
    background-color: var(--color-primary);
    color: var(--color-surface);
  }
</style>

